{"version":3,"sources":["moviecardfull.js","moviecardshort.js","movielist.js","searchbar.js","header.js","favs.js","App.js","reportWebVitals.js","reducers/index.js","reducers/updatesearch.js","reducers/addremovefavs.js","reducers/currmovie.js","index.js"],"names":["MovieCardFull","movieName","originalName","moviePoster","releaseDate","rating","description","genres","id","isFaved","useSelector","state","AddRemoveFavs","filter","e","useState","similar","setSimilar","dispatch","useDispatch","recieveSimilar","a","url","fetch","response","json","data","results","splice","addRemoveFromFavs","length","type","payload","lstorage","JSON","parse","localStorage","getItem","push","setItem","stringify","saveToLocalStorage","removeFromLocalStorage","className","src","Button","fullWidth","variant","color","onClick","join","map","title","MovieCardShort","open","setOpen","setFaved","useEffect","includes","Modal","onClose","key","MovieList","displayMovies","setDisplayMovies","currPage","setCurrPage","movies","UpdateSearch","movie","CurrMovie","genreFromId","prevState","getMostPopular","Object","entries","currMovieGenres","genre_ids","name","getSearchResults","dataLength","next","hasMore","Grid","container","direction","justify","poster_path","original_title","release_date","vote_average","overview","SearchBar","setMovie","setGenres","passSearchResults","searchResult","onChange","target","value","Header","to","Favs","setF","favs","console","log","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","element","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3e6feaf.chunk.js","sourcesContent":["import './moviecardfull.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport { useState } from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nconst key = '04b3d0c6123142a26162964fff18fab3';\r\n\r\nexport default function MovieCardFull ({\r\n    movieName,\r\n    originalName,\r\n    moviePoster,\r\n    releaseDate,\r\n    rating,\r\n    description,\r\n    genres,\r\n    id\r\n}) {\r\n    const isFaved = useSelector(state => state.AddRemoveFavs).filter(e => e.id == id);\r\n    const [similar, setSimilar] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    const recieveSimilar = async() => {\r\n        let url = `https://api.themoviedb.org/3/movie/${id}/similar?api_key=${key}&language=en-US&page=1`\r\n        let response = await fetch(url);\r\n        let data = await response.json();\r\n        data = data.results.splice(0,4);\r\n        setSimilar(data);\r\n    }\r\n\r\n    useState(() => {\r\n        recieveSimilar();\r\n        \r\n    },[])\r\n    const saveToLocalStorage = () => {\r\n        let lstorage = JSON.parse(localStorage.getItem('favs')) || [];\r\n        lstorage.push({movieName,\r\n            moviePoster,\r\n            originalName,\r\n            releaseDate,\r\n            rating,\r\n            description,\r\n            genres,\r\n            id});\r\n            localStorage.setItem('favs', JSON.stringify(lstorage));\r\n      }\r\n\r\n      const removeFromLocalStorage = () => {\r\n        let lstorage = JSON.parse(localStorage.getItem('favs'));\r\n        lstorage = lstorage.filter(e => e['id'] != id);\r\n        localStorage.setItem('favs', JSON.stringify(lstorage));\r\n    }\r\n\r\n      const addRemoveFromFavs = () => {\r\n        if (isFaved.length == 0) {\r\n            dispatch({type: 'ADD_TO_FAVS', payload: {movieName,\r\n                moviePoster,\r\n                originalName,\r\n                releaseDate,\r\n                rating,\r\n                description,\r\n                genres,\r\n                id}});\r\n                saveToLocalStorage();\r\n        } else {\r\n            dispatch({type: 'REMOVE_FROM_FAVS', payload: id});\r\n            removeFromLocalStorage();\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className='movie-card-full'>\r\n            <div className='movie-card-full__header'>\r\n                <h1 className='movie-card-full__header__english-name'>{movieName}</h1>\r\n                <h3 className='movie-card-full__header__original-name'>{originalName}</h3>\r\n            </div>\r\n            <div className='movie-card-full__info'>\r\n                <div className='movie-card-full__poster'>\r\n                    <img src={moviePoster} className='movie-card-full__poster__img' />\r\n                    <div className='movie-card-full__add-to-favs'>\r\n                <Button fullWidth className='movie-card-full__add-to-favs__btn' variant=\"contained\" color={isFaved.length > 0 ? 'secondary' : 'primary'} onClick={() => addRemoveFromFavs()}>{isFaved.length > 0 ?  'Remove from' : 'Add to'} favourites</Button>\r\n            </div>\r\n                </div>\r\n\r\n                <div className='movie-card-full__description'>\r\n                    <p className='movie-card-full__description__release-date'><strong>Release date: </strong>{releaseDate}</p>\r\n                    <p className='movie-card-full__description__rating'><strong>Rating: </strong>{rating}</p>\r\n                    <p className='movie-card-full__description__genres'><strong>Genres: </strong>{genres&&genres.join(', ')}</p>\r\n                    <p className='movie-card-full__description__description-text'>{description}</p>\r\n                </div>\r\n                <div className='movie-card-full__similar-movies'>\r\n                    <h3 className='movie-card-full__similar-movies__header'>Similar movies</h3>\r\n                    <ul className='movie-card-full__similar-movies__list'>\r\n                    {similar.map(e => {\r\n\r\n                        return (\r\n                            <li>{e.title}</li>\r\n                        )\r\n                    })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}","\r\nimport './moviecardshort.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport {useState, useEffect} from 'react';\r\nimport MovieCardFull from './moviecardfull'\r\nimport React from 'react';\r\n\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\nexport default function MovieCardShort({\r\n    movieName,\r\n    moviePoster,\r\n    originalName,\r\n    releaseDate,\r\n    rating,\r\n    description,\r\n    genres,\r\n    id\r\n}) {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const [faved, setFaved] = useState(false);\r\n\r\n    const isFaved = useSelector(state => state.AddRemoveFavs).filter(e => e.id == id);\r\n\r\n    const checkFaved = () => {\r\n        if (isFaved.length > 0) {\r\n            setFaved(true)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkFaved()\r\n    }, [])\r\n\r\n    const openModal = () => {\r\n\r\n       \r\n       \r\n        setOpen(!open)\r\n    }\r\n   \r\n    const addRemoveFromFavs = () => {\r\n        if (isFaved.length == 0) {\r\n            dispatch({type: 'ADD_TO_FAVS', payload: {movieName,\r\n                moviePoster,\r\n                originalName,\r\n                releaseDate,\r\n                rating,\r\n                description,\r\n                genres,\r\n                id}});\r\n                saveToLocalStorage();\r\n        } else {\r\n            dispatch({type: 'REMOVE_FROM_FAVS', payload: id});\r\n            removeFromLocalStorage();\r\n        }\r\n\r\n    }\r\n\r\n    const removeFromLocalStorage = () => {\r\n        if ( JSON.parse(localStorage.getItem('favs')).length > 0 ) {\r\n            let lstorage = JSON.parse(localStorage.getItem('favs'));\r\n            lstorage = lstorage.filter(e => e['id'] != id);\r\n            localStorage.setItem('favs', JSON.stringify(lstorage));\r\n        }\r\n    }\r\n\r\n    const saveToLocalStorage = () => {\r\n        let lstorage = JSON.parse(localStorage.getItem('favs')) || [];\r\n        lstorage.push({movieName,\r\n            moviePoster,\r\n            originalName,\r\n            releaseDate,\r\n            rating,\r\n            description,\r\n            genres,\r\n            id});\r\n            localStorage.setItem('favs', JSON.stringify(lstorage));\r\n      }\r\n      \r\n      \r\n     \r\n    \r\n\r\n    return (\r\n        <div className='movie-card-short'>\r\n            \r\n                \r\n            \r\n            <div className='movie-card-short__desc'>\r\n            <h1 className='movie-card-short__header__name'>{movieName}</h1>\r\n                <p className='movie-card-short__header_genres'>{genres?genres.join(', '): <br />}</p>\r\n                <Button fullWidth className='movie-card-short__header__addtofavs' variant=\"contained\" color={isFaved.length > 0 ? 'secondary' : 'primary'} onClick={() => addRemoveFromFavs()}>{isFaved.length > 0 ?  'Remove from' : 'Add to'} Favourites</Button>\r\n                <div className='movie-card-short__header_img-container'>\r\n                    <img src={!moviePoster.includes('null')?moviePoster:'https://via.placeholder.com/500x750.jpg?text=No+Poster'} className='movie-card-short__desc__img' />\r\n                </div>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => openModal()} fullWidth>See more info</Button>\r\n            </div>\r\n\r\n            <Modal\r\n            open={open}\r\n            onClose={() => setOpen(!open)}\r\n            >\r\n                \r\n               <MovieCardFull \r\n                movieName={movieName}\r\n                moviePoster={!moviePoster.includes('null')?moviePoster:'https://via.placeholder.com/200x300.png?text=No+Poster'}\r\n                originalName={originalName}\r\n                releaseDate={releaseDate}\r\n                rating={rating}\r\n                description={description}\r\n                genres={genres}\r\n                id={id}\r\n\r\n               />\r\n                \r\n            </Modal>\r\n            \r\n        </div>\r\n    )\r\n}","import MovieCardShort from './moviecardshort';\r\nimport './movielist.css';\r\nimport {useState, useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\n\r\nconst key = '04b3d0c6123142a26162964fff18fab3';\r\n\r\nexport default function MovieList() {\r\n    \r\n    const [displayMovies, setDisplayMovies] = useState( [] );\r\n    const [currPage, setCurrPage] = useState(1);\r\n    const [mostPopular, setMostPopular] = useState([]);\r\n    \r\n   \r\n\r\n    const movies = useSelector(state => state.UpdateSearch);\r\n    const movie = useSelector(state => state.CurrMovie);\r\n\r\n    const genreFromId = async() => {\r\n        let url = `https://api.themoviedb.org/3/genre/movie/list?api_key=${key}&language=en-US`\r\n        let response = await fetch(url);\r\n        let data = await response.json();\r\n\r\n        return data.genres;\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        genreFromId();\r\n        \r\n    },[])\r\n\r\n\r\n    \r\n\r\n    \r\n    const fetchMoreData = () => {\r\n        setCurrPage(prevState => prevState+1); \r\n        if (movie) {\r\n            \r\n        getSearchResults() \r\n         }\r\n        else {\r\n            getMostPopular()\r\n        }\r\n        \r\n    }\r\n\r\n   useEffect(() => {\r\n    setCurrPage(prevState => prevState+1); \r\n    getMostPopular();\r\n\r\n   }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (movie.length>0) {\r\n            \r\n        setDisplayMovies(Object.entries(movies));\r\n        \r\n        }\r\n    }, [movies]);\r\n\r\n\r\n    const getMostPopular = async() => {\r\n        let url = `https://api.themoviedb.org/3/movie/popular?api_key=${key}&language=en-US&page=${currPage}`;\r\n        let response = await fetch(url);\r\n        let data = await response.json();\r\n        let genres = await genreFromId();\r\n        if (data.results) {\r\n            if (data.results && data.results.length > 0) {\r\n                data = data.results.map(e => {\r\n                    let currMovieGenres = [];\r\n                    if (e.genre_ids.length > 0 ) {\r\n                        \r\n                        for (let a = 0; a<genres.length; a++) {\r\n                            if( e.genre_ids.includes(genres[a].id) ) {\r\n                               \r\n                                currMovieGenres.push(genres[a].name)\r\n                            }\r\n                        }\r\n                        e['genres'] = currMovieGenres;\r\n                        \r\n                    }\r\n                    return e;\r\n                })\r\n            }\r\n            \r\n      \r\n            setDisplayMovies(prevState => [...prevState, ...Object.entries(data)]);\r\n            \r\n      \r\n        }\r\n    }\r\n\r\n    const getSearchResults = async () => {\r\n        \r\n        let url = `https://api.themoviedb.org/3/search/movie?api_key=${key}&language=en-US&query=${movie}&page=${currPage+1}&include_adult=false`\r\n        let response = await fetch(url);\r\n        let data = await response.json();\r\n        let genres = await genreFromId();\r\n        if (data.results) {\r\n            if (data.results && data.results.length > 0) {\r\n                data = data.results.map(e => {\r\n                    let currMovieGenres = [];\r\n                    if (e.genre_ids.length > 0 ) {\r\n                        \r\n                        for (let a = 0; a<genres.length; a++) {\r\n                            if( e.genre_ids.includes(genres[a].id) ) {\r\n                               \r\n                                currMovieGenres.push(genres[a].name)\r\n                            }\r\n                        }\r\n                        e['genres'] = currMovieGenres;\r\n                        \r\n                    }\r\n                    return e;\r\n                })\r\n            }\r\n            setDisplayMovies(prevState => [...prevState, ...Object.entries(data)]);\r\n\r\n        }\r\n       \r\n        \r\n        \r\n      }\r\n\r\n    return (\r\n        \r\n            <InfiniteScroll\r\n          dataLength={displayMovies.length}\r\n          next={() => fetchMoreData()}\r\n          hasMore={true}\r\n        >\r\n            <Grid className='movie-list'\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        >\r\n            {displayMovies.length > 0 && displayMovies.map(e => {\r\n                \r\n                return (\r\n                    <MovieCardShort \r\n                     movieName = {e[1]&&e[1].title}\r\n                     moviePoster = {e[1]&&`http://image.tmdb.org/t/p/w500${e[1].poster_path}`}\r\n                     originalName = {e[1]&&e[1].original_title}\r\n                    releaseDate = {e[1]&&e[1].release_date}\r\n                    rating={e[1]&&e[1].vote_average}\r\n                    description={e[1]&&e[1].overview}\r\n                    genres = {e[1].genres}\r\n                    id={e[1]&&e[1].id}\r\n                />\r\n                )\r\n            })}\r\n            \r\n            </Grid>\r\n        </InfiniteScroll>\r\n        \r\n    )\r\n}","import './searchbar.css'\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst key = '04b3d0c6123142a26162964fff18fab3';\r\n\r\nexport default function SearchBar() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [movie, setMovie] = useState('');\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    const [genres, setGenres] = useState([])\r\n\r\n    const genreFromId = async() => {\r\n        let url = `https://api.themoviedb.org/3/genre/movie/list?api_key=${key}&language=en-US`\r\n        let response = await fetch(url);\r\n        let data = await response.json();\r\n\r\n        setGenres(data.genres);\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        genreFromId();\r\n        \r\n    },[])\r\n\r\n    useEffect(() => {\r\n        getSearchResults();\r\n        dispatch({type: 'CURR_MOVIE', payload: movie})\r\n    }, [movie]);\r\n\r\n    \r\n\r\n    const getSearchResults = async () => {\r\n        let url = `https://api.themoviedb.org/3/search/movie?api_key=${key}&language=en-US&query=${movie}&page=1&include_adult=false`\r\n        let response = await fetch(url);\r\n        let data = await response.json();\r\n       \r\n        \r\n       if (data.results && data.results.length > 0) {\r\n        data = data.results.map(e => {\r\n            let currMovieGenres = [];\r\n            if (e.genre_ids.length > 0 ) {\r\n                \r\n                for (let a = 0; a<genres.length; a++) {\r\n                    if( e.genre_ids.includes(genres[a].id) ) {\r\n                       \r\n                        currMovieGenres.push(genres[a].name)\r\n                    }\r\n                }\r\n                e['genres'] = currMovieGenres;\r\n                \r\n            }\r\n            return e;\r\n        })\r\n       \r\n\r\n        \r\n        passSearchResults(data);\r\n        }\r\n      }\r\n\r\n    const passSearchResults = (searchResult) => {\r\n        dispatch({type: 'UPDATE_SEARCH', payload: searchResult})\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='search-bar'>\r\n           <input type='text' onChange={(e) => setMovie(e.target.value)} className='search-bar__input' />\r\n        </div>\r\n    )\r\n}","import './header.css';\r\nimport {Link} from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nexport default function Header() {\r\n\r\n    return (\r\n        <div className='header'>\r\n            <div className='header_elem'><Link to='/'><Button>Main</Button></Link></div>\r\n            <div className='header_elem'><Link to='/favs'><Button>Favourites</Button></Link></div>\r\n        </div>\r\n    )\r\n}","import {useSelector} from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MovieCardShort from './moviecardshort'\r\nimport { useEffect, useState } from 'react';\r\nimport './favs.css'\r\nimport MovieCardFull from './moviecardfull';\r\n\r\nexport default function Favs() {\r\n    const [f, setF] = useState([]);\r\n\r\n    const favs = useSelector(state => state.AddRemoveFavs);\r\n\r\n   \r\n\r\n    useEffect(() => {\r\n        setF(favs);\r\n        console.log(favs)\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className='favourites'>\r\n            <Grid className='movie-list'\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        >\r\n\r\n            {favs.length > 0 && favs.map(e => {\r\n                return (\r\n                    <MovieCardShort \r\n                    movieName={e.movieName}\r\n                    id={e.id}\r\n                    moviePoster={e.moviePoster}\r\n                    originalName = {e.originalName}\r\n                    releaseDate = {e.releaseDate}\r\n                    rating={e.rating}\r\n                    description={e.description}\r\n                    genres = {e.genres}\r\n                    id={e.id}\r\n                    />\r\n                )\r\n            })}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport MovieList from './movielist';\nimport SearchBar from './searchbar';\nimport Header from './header';\nimport Favs from './favs';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport {useDispatch} from 'react-redux';\nimport {useEffect} from 'react';\n\nfunction App() {\n\n  const dispatch = useDispatch();\n   let lstorage = localStorage.getItem('favs') !==null ? JSON.parse(localStorage.getItem('favs')) : [];\n    \n\n    useEffect(() => {\n        \n        if (lstorage.length > 0) {\n        lstorage.map(e => {\n          dispatch({type: 'ADD_TO_FAVS', payload: e})\n        })\n      \n      }\n    },[])\n\n  return (\n    <div className=\"app\">\n       <Router>\n        <Header />\n        <Switch>\n            <Route exact path=\"/\">\n              <SearchBar />\n              <MovieList />\n            </Route>\n            <Route path='/favs'>\n                <Favs />\n            </Route>\n        </Switch>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\r\nimport UpdateSearch from './updatesearch';\r\nimport AddRemoveFavs from './addremovefavs';\r\nimport CurrMovie from './currmovie'\r\n\r\nconst rootReducer = combineReducers({\r\n    UpdateSearch,\r\n    AddRemoveFavs,\r\n    CurrMovie\r\n  });\r\n\r\n  export default rootReducer;","export default function UpdateSearch (state = [], action) {\r\n    switch(action.type) {\r\n        case 'UPDATE_SEARCH':\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\n\r\nexport default function AddRemoveFavs (state = [], action) {\r\n    switch(action.type) {\r\n        case 'ADD_TO_FAVS':\r\n           \r\n            return [...state, action.payload ]\r\n            \r\n        case 'REMOVE_FROM_FAVS':\r\n            return state.filter(element => element.id != action.payload)\r\n        default:\r\n            return state;\r\n    }\r\n}","export default function CurrMovie (state = '', action) {\r\n    switch(action.type) {\r\n        case 'CURR_MOVIE':\r\n            return action.payload\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nfunction saveToLocalStorage(state) {\n  try {\n    const serialisedState = JSON.stringify(state);\n    localStorage.setItem(\"persistantState\", serialisedState);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nconsole.log(store)\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}